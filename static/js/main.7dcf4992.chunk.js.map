{"version":3,"sources":["features/lists/listsSlice.js","components/ui/SuccessButton.js","components/ui/TitleButton.js","components/ui/TextFieldWhite.js","features/lists/NewList.js","features/tasks/tasksSlice.js","features/tasks/NewTask.js","features/tasks/Task.js","features/tasks/Tasks.js","features/lists/List.js","features/lists/Lists.js","components/page/Board.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["id","listsSlice","createSlice","name","initialState","elements","reducers","add","state","payload","push","title","edit","console","log","find","element","actions","currentLists","lists","SuccessButton","withStyles","root","boxShadow","textTransform","fontSize","padding","border","lineHeight","backgroundColor","green","borderColor","color","fontFamily","join","Button","TitleButton","cursor","pointerEvent","justifyContent","wordBreak","useStyles","makeStyles","theme","background","TextFieldWhite","props","classes","InputBase","autoFocus","onBlur","value","onChange","placeholder","margin","variant","multiline","className","fullWidth","size","onKeyPress","event","key","onSubmit","exist","palette","text","primary","default","new","cancelButton","spacing","listForm","NewList","dispatch","useDispatch","useState","setTitle","preventDefault","trim","Promise","resolve","reject","addList","then","Paper","onClick","e","Collapse","in","noValidate","autoComplete","disableRipple","target","Grid","container","item","xs","Clear","Add","tasksSlice","list_id","list","NewTask","addTask","display","Task","setEdit","data","onValidate","editTask","Tasks","tasks","useSelector","filter","task","map","List","editList","width","float","Lists","Board","App","Container","maxWidth","configureStore","reducer","listsReducer","tasksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7dcf4992.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nlet id = 1;\r\nexport const listsSlice = createSlice({\r\n  name: \"lists\",\r\n  initialState: {\r\n    elements: [],\r\n  },\r\n  reducers: {\r\n    add: (state, {payload}) => {\r\n      state.elements.push({id: id++, title: payload.title});\r\n    },\r\n    edit: (state, {payload}) => {\r\n      console.log(payload.id)\r\n      console.log(state.elements.find(element => element.id === payload.id))\r\n      let element = state.elements.find(element => element.id === payload.id)\r\n      element.title = payload.title;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { add, edit } = listsSlice.actions;\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const addList = title => dispatch => {\r\n  return new Promise((resolve, reject) => {\r\n    dispatch(add({title}));\r\n    resolve();\r\n  });\r\n};\r\n\r\nexport const editList = (title, id) => dispatch => {\r\n  return new Promise((resolve, reject) => {\r\n    dispatch(edit({title, id}));\r\n    resolve();\r\n  });\r\n};\r\nexport const currentLists = (state) => state.lists.elements;\r\n\r\nexport default listsSlice.reducer;\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { green } from \"@material-ui/core/colors\";\r\n\r\nconst SuccessButton = withStyles({\r\n  root: {\r\n    boxShadow: 'none',\r\n    textTransform: 'none',\r\n    fontSize: 14,\r\n    padding: '6px 12px',\r\n    border: '1px solid',\r\n    lineHeight: 1.5,\r\n    backgroundColor: green[500],\r\n    borderColor: green[500],\r\n    color: \"white\",\r\n    fontFamily: [\r\n      '-apple-system',\r\n      'BlinkMacSystemFont',\r\n      '\"Segoe UI\"',\r\n      'Roboto',\r\n      '\"Helvetica Neue\"',\r\n      'Arial',\r\n      'sans-serif',\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(','),\r\n    '&:hover': {\r\n      backgroundColor: green[700],\r\n      borderColor: green[700],\r\n      boxShadow: 'none',\r\n    },\r\n    '&:active': {\r\n      boxShadow: 'none',\r\n      backgroundColor: green[700],\r\n      borderColor: green[700],\r\n    },\r\n    '&:focus': {\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\r\n    },\r\n  },\r\n})(Button);\r\nexport default SuccessButton;","import { withStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst TitleButton = withStyles({\r\n  root: {\r\n    cursor: \"pointer\",\r\n    pointerEvent: \"none\",\r\n    justifyContent: \"unset\",\r\n    textTransform: 'none',\r\n    padding: 7,\r\n    wordBreak: \"break-word\",\r\n    '&:hover': {\r\n        backgroundColor: \"inherit\",\r\n        borderColor: \"inherit\",\r\n        boxShadow: \"none\",\r\n      }\r\n  },\r\n})(Button);\r\nexport default TitleButton;","import React from \"react\";\r\nimport { InputBase } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    background: \"white\",\r\n    border: \"1px solid green\",\r\n    fontSize: \"1rem\"\r\n  },\r\n}));\r\n\r\nfunction TextFieldWhite(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <InputBase\r\n      autoFocus={props.autoFocus}\r\n      onBlur={props.onBlur}\r\n      value={props.value}\r\n      onChange={props.onChange}\r\n      placeholder=\"List title\"\r\n      margin=\"dense\"\r\n      variant=\"outlined\"\r\n      multiline={true}\r\n      className={classes.root}\r\n      fullWidth\r\n      size=\"small\"\r\n      onKeyPress={(event) => event.key === \"Enter\" && props.onSubmit(event)}\r\n    />\r\n  );\r\n}\r\n\r\nexport default TextFieldWhite;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Grid, Paper, Button, Collapse } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Add, Clear } from \"@material-ui/icons\";\r\nimport { addList } from \"./listsSlice\";\r\nimport SuccessButton from \"../../components/ui/SuccessButton\";\r\nimport TitleButton from \"../../components/ui/TitleButton\";\r\nimport TextFieldWhite from \"../../components/ui/TextFieldWhite\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  exist: {\r\n    color: theme.palette.text.primary,\r\n    background: theme.palette.background.default,\r\n  },\r\n  new: {\r\n    color: \"white\",\r\n    padding: 0,\r\n    background: \"rgba(255,255,255,0.5)\",\r\n  },\r\n  cancelButton: {\r\n    padding: theme.spacing(1),\r\n  },\r\n  listForm: {\r\n    padding: 5,\r\n  },\r\n}));\r\n\r\nexport function NewList() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [title, setTitle] = useState(null);\r\n  const onPaperClick = (e) => {\r\n    if (title == null) {\r\n      setTitle(\"\");\r\n    }\r\n  };\r\n  const add = (event) => {\r\n    event.preventDefault();\r\n    if (title.trim() !== \"\")\r\n      dispatch(addList(title)).then(() => setTitle(null));\r\n  };\r\n  return (\r\n    <Paper\r\n      className={title != null ? `${classes.exist}` : `${classes.new}`}\r\n      onClick={onPaperClick}\r\n    >\r\n      <Collapse in={title != null}>\r\n        <form\r\n          className={classes.listForm}\r\n          noValidate\r\n          autoComplete=\"off\"\r\n          onSubmit={add}\r\n        >\r\n          {title != null && (\r\n            <TitleButton fullWidth disableRipple>\r\n            <TextFieldWhite\r\n              autoFocus\r\n              value={title ? title : \"\"}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              onSubmit={add}\r\n            />\r\n            </TitleButton>\r\n          )}\r\n          <Grid container spacing={1}>\r\n            <Grid item xs>\r\n              <SuccessButton onClick={add} fullWidth>\r\n                Add a list\r\n              </SuccessButton>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Button\r\n                onClick={() => setTitle(null)}\r\n                className={`${classes.cancelButton}`}\r\n              >\r\n                <Clear />\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Collapse>\r\n      <Collapse in={title == null}>\r\n        <TitleButton fullWidth>\r\n          <Add fontSize=\"small\" /> Add a new list\r\n        </TitleButton>\r\n      </Collapse>\r\n    </Paper>\r\n  );\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nlet id = 1;\r\nexport const tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    elements: [],\r\n  },\r\n  reducers: {\r\n    add: (state, {payload}) => {\r\n      state.elements.push({id: id++, title: payload.title, list_id: payload.list.id});\r\n    },\r\n    edit: (state, {payload}) => {\r\n      let element = state.elements.find(element => element.id === payload.id)\r\n      element.title = payload.title;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { add, edit } = tasksSlice.actions;\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const addTask = (title, list) => dispatch => {\r\n  return new Promise((resolve, reject) => {\r\n    dispatch(add({title, list}));\r\n    resolve();\r\n  });\r\n};\r\n\r\nexport const editTask = (title, list, id) => dispatch => {\r\n  return new Promise((resolve, reject) => {\r\n    dispatch(edit({title, list, id}));\r\n    resolve();\r\n  });\r\n};\r\nexport const currentTasks = (list_id) => (state) => state.tasks.elements.filter(task => task.list_id === list_id);\r\n\r\nexport default tasksSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Add, Clear } from \"@material-ui/icons\";\r\nimport { addTask } from \"./tasksSlice\";\r\nimport SuccessButton from \"../../components/ui/SuccessButton\";\r\nimport TitleButton from \"../../components/ui/TitleButton\";\r\nimport TextFieldWhite from \"../../components/ui/TextFieldWhite\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  exist: {\r\n    color: theme.palette.text.primary,\r\n    background: theme.palette.background.default,\r\n  },\r\n  new: {\r\n    color: \"white\",\r\n    padding: 0,\r\n    background: \"rgba(255,255,255,0.5)\",\r\n  },\r\n  cancelButton: {\r\n    padding: theme.spacing(1),\r\n  },\r\n  listForm: {\r\n    padding: 5,\r\n  },\r\n}));\r\n\r\nexport function NewTask(props) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [title, setTitle] = useState(null);\r\n  const onPaperClick = (e) => {\r\n    if (title == null) {\r\n      setTitle(\"\");\r\n    }\r\n  };\r\n  const add = (event) => {\r\n    event.preventDefault();\r\n    if (title.trim() !== \"\")\r\n      dispatch(addTask(title, props.list)).then(() => setTitle(null));\r\n  };\r\n  return (\r\n    <div onClick={onPaperClick}>\r\n      {\" \"}\r\n      {title != null ? (\r\n        <form\r\n          className={classes.listForm}\r\n          noValidate\r\n          autoComplete=\"off\"\r\n          onSubmit={add}\r\n        >\r\n          {title != null && (\r\n            <TitleButton fullWidth disableRipple>\r\n              <TextFieldWhite\r\n                autoFocus\r\n                value={title ? title : \"\"}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                onSubmit={add}\r\n              />\r\n            </TitleButton>\r\n          )}\r\n          <Grid container spacing={1}>\r\n            <Grid item xs>\r\n              <SuccessButton onClick={add} fullWidth>\r\n                Add a task\r\n              </SuccessButton>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Button\r\n                onClick={() => setTitle(null)}\r\n                className={`${classes.cancelButton}`}\r\n              >\r\n                <Clear />\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      ) : (\r\n        <TitleButton fullWidth>\r\n          <Add fontSize=\"small\" /> Add a new task\r\n        </TitleButton>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { editTask } from \"./tasksSlice\";\r\nimport TitleButton from \"../../components/ui/TitleButton\";\r\nimport TextFieldWhite from \"../../components/ui/TextFieldWhite\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  exist: {\r\n    color: theme.palette.text.primary,\r\n    background: \"white\",\r\n    display: \"block\"\r\n  },\r\n  listForm: {\r\n    padding: 5,\r\n  },\r\n}));\r\n\r\nexport function Task(props) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [edit, setEdit] = useState(false);\r\n  const [title, setTitle] = useState(props.data.title);\r\n  const onValidate = (event) => {\r\n      event.preventDefault();\r\n      if (title.trim() !== \"\")\r\n      dispatch(editTask(title, props.list, props.data.id)).then(() => setEdit(false));\r\n      else {\r\n          setEdit(false);\r\n          setTitle(props.data.title);\r\n      }\r\n  };\r\n  return (\r\n    <Paper className={`${classes.exist}`}>\r\n      {!edit ? (\r\n        <TitleButton  onClick={() => setEdit(true)} fullWidth disableRipple>{props.data.title}</TitleButton>\r\n      ) : (\r\n          <form onSubmit={onValidate}>\r\n        <TitleButton fullWidth disableRipple>\r\n          <TextFieldWhite\r\n            autoFocus\r\n            onBlur={onValidate}\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            onSubmit={onValidate}\r\n                      />\r\n        </TitleButton>\r\n        </form>\r\n      )}\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { currentTasks } from \"./tasksSlice\";\r\nimport { NewTask as NewTaskComponent } from \"./NewTask\";\r\nimport { Task } from \"./Task\";\r\n\r\nexport function Tasks(props) {\r\n  const tasks = useSelector(currentTasks(props.list.id));\r\n  return (\r\n    <Grid container spacing={1}>\r\n      {tasks.map((task) => (\r\n        <Grid item xs={12}>\r\n          <Task data={task} />\r\n        </Grid>\r\n      ))}\r\n      <Grid item xs={12}>\r\n      <NewTaskComponent list={props.list} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { editList } from \"./listsSlice\";\r\nimport TitleButton from \"../../components/ui/TitleButton\";\r\nimport TextFieldWhite from \"../../components/ui/TextFieldWhite\";\r\nimport { Tasks } from \"../tasks/Tasks\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  exist: {\r\n    color: theme.palette.text.primary,\r\n    background: theme.palette.background.default,\r\n  },\r\n  listForm: {\r\n    padding: 5,\r\n  },\r\n}));\r\n\r\nexport function List(props) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [edit, setEdit] = useState(false);\r\n  const [title, setTitle] = useState(props.data.title);\r\n  const onValidate = (event) => {\r\n      event.preventDefault();\r\n      if (title.trim() !== \"\")\r\n      dispatch(editList(title, props.data.id)).then(() => setEdit(false));\r\n      else {\r\n          setEdit(false);\r\n          setTitle(props.data.title);\r\n      }\r\n  };\r\n  return (\r\n    <Paper className={`${classes.exist}`}>\r\n      {!edit ? (\r\n        <TitleButton  onClick={() => setEdit(true)} fullWidth disableRipple>{props.data.title}</TitleButton>\r\n      ) : (\r\n          <form onSubmit={onValidate}>\r\n        <TitleButton fullWidth disableRipple>\r\n          <TextFieldWhite\r\n            autoFocus\r\n            onBlur={onValidate}\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            onSubmit={onValidate}\r\n          />\r\n        </TitleButton>\r\n        </form>\r\n      )}\r\n      <Tasks list={props.data} />\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { currentLists } from \"./listsSlice\";\r\nimport { NewList as NewListComponent } from \"./NewList\";\r\nimport { List } from \"./List\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"inline-flex\"\r\n  },\r\n  list: {\r\n    width: 300,\r\n    float: \"left\",\r\n    margin: 5\r\n  }\r\n}));\r\n\r\nexport function Lists() {\r\n  const classes = useStyles();\r\n  const lists = useSelector(currentLists);\r\n  return (\r\n    <div className={classes.root}>\r\n      {lists.map((list) => (\r\n        <div key={list.id} className={classes.list}>\r\n          <List data={list} />\r\n        </div>\r\n      ))}\r\n      <div className={classes.list}>\r\n      <NewListComponent />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Lists } from \"../../features/lists/Lists\";\r\n\r\nfunction Board() {\r\n  return <Lists />;\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport Board from \"./components/page/Board\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\"></header>\r\n      <Container maxWidth=\"xl\">\r\n        <Board />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport listsReducer from \"../features/lists/listsSlice\";\r\nimport tasksReducer from \"../features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    lists: listsReducer,\r\n    tasks: tasksReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}